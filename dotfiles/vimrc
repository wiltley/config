call plug#begin()
Plug 'MunifTanjim/prettier.nvim'
Plug 'preservim/NERDTree'
Plug 'kyazdani42/nvim-web-devicons'  
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'arzg/vim-colors-xcode'
Plug 'mattn/emmet-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-fugitive'
Plug 'kdheepak/lazygit.nvim'
Plug 'ap/vim-css-color'
Plug 'easymotion/vim-easymotion'
Plug 'ggandor/lightspeed.nvim'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf' 
Plug 'airblade/vim-rooter'
Plug 'neovim/nvim-lspconfig'
Plug 'wesQ3/vim-windowswap'
Plug 'nvim-lua/plenary.nvim'
Plug 'ThePrimeagen/harpoon'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'nvim-telescope/telescope.nvim'
Plug 'navarasu/onedark.nvim'
Plug 'danilamihailov/beacon.nvim'
Plug 'ojroques/nvim-hardline'
Plug 'nvim-lualine/lualine.nvim'
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons' " optional, for file icons
Plug 'kyazdani42/nvim-web-devicons' " Recommended (for coloured icons)
" Plug 'ryanoasis/vim-devicons' Icons without colours
Plug 'akinsho/bufferline.nvim', { 'tag': 'v3.*' }
call plug#end()			

lua << EOF
require('hardline').setup {}
EOF

lua << EOF
require("bufferline").setup{
	options = {
		modified_icon = "●",
		buffer_close_icon = "",
		close_icon = "",
		left_trunc_marker = "",
		right_trunc_marker = "",
		numbers = "ordinal",
		mode = "tabs",
		max_name_length = 15,
		max_prefix_length = 6,
		diagnostics = "coc",
		show_buffer_icons = true,
		show_buffer_close_icons = false,
		show_close_icon = false,
		persist_buffer_sort = true,
		enforce_regular_tabs = true,
		diagnostics_indicator = function(count, level)
		  local icon = level:match("error") and "" or ""
		  return icon .. count
    end,
  },
}

EOF

	
set termguicolors


let g:onedark_config = {
  \ 'style': 'darker',
  \ 'toggle_style_key': '<leader>ts',
  \ 'ending_tildes': v:true,
  \ 'diagnostics': {
    \ 'darker': v:false,
    \ 'background': v:false,
  \ },
\ }
colorscheme xcodedark

lua << EOF
require('lualine').setup {
  options = {
    theme = 'onedark'
    -- ... your lualine config
  }
}


EOF

nnoremap <SPACE> <Nop>
map <Space> <Leader>


" lua file
lua require('init')

" Setting tab spacces
set softtabstop=0 
set tabstop=4       " The width of a TAB is set to 4.
set shiftwidth=4    " Indents will have a width of 4
set softtabstop=4   " Sets the number of columns for a TAB
set noexpandtab       " Expand TABs to spaces


"harpoon
nnoremap <leader>mm :lua require("harpoon.ui").toggle_quick_menu()<CR>
nnoremap <leader>ma :lua require("harpoon.mark").add_file()<CR>

nnoremap <leader>m1 :lua require("harpoon.ui").nav_file(1)<CR>
nnoremap <leader>m2 :lua require("harpoon.ui").nav_file(2)<CR>
nnoremap <leader>m3 :lua require("harpoon.ui").nav_file(3)<CR>
"Telescope	
"nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>m4 :lua require("harpoon.ui").nav_file(4)<CR>


"fuzzy finder
set rtp+=/usr/local/opt/fzf
nnoremap <leader>f :FZF <CR>
let g:fzf_preview_window = ['right:50%', 'ctrl-/']
"nnoremap <leader>f <cmd>Telescope git_files<cr>

"copy paste from clipboard bindings
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

"lightning
nnoremap s <Plug>Lightspeed_omni_s


"minimap
let g:minimap_width = 10
let g:minimap_auto_start = 1
let g:minimap_auto_start_win_enter = 1

"airline
"let g:airline_powerline_fonts = 1
"if !exists('g:airline_symbols')
"	let g:airline_symbols = {}
"endif

"let g:airline_symbols.colnr = ''
"let g:airline_section_error = ''
"let g:airline_skip_empty_sections = 1

" LazyGit
nnoremap <silent> <leader>gl :LazyGit<CR>


"window swap
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <leader>w :call WindowSwap#EasyWindowSwap()<CR>

"Telescope	
"nnoremap <leader>ff <cmd>Telescope find_files<cr>
"nnoremap <leader>fg <cmd>Telescope live_grep<cr>
"nnoremap <leader>fb <cmd>Telescope buffers<cr>
"nnoremap <leader>fh <cmd>Telescope oldfiles<cr>
"nnoremap <leader>fe <cmd> Telescope file_browser<cr> 


"lsp
set completeopt=menu

"bufferline
"easymotion
" Move to char

"nnoremap S <Nop>
"map S <Plug>(easymotion-bd-f)
"nmap S <Plug>(easymotion-overwin-f)
"
"" Move to word
"nnoremap s <Nop>
"map  s <Plug>(easymotion-bd-w)
"nmap s <Plug>(easymotion-overwin-w)
"
"" Move to line
"map <leader>L <Plug>(easymotion-bd-jk)
"nmap <leader>L <Plug>(easymotion-overwin-line)


"
"dashboard
"

" Nerd tree settings n shit
"nmap <LEADER>nto :NERDTreeToggle<CR>
"nmap <LEADER>ntf :NERDTreeFocus<CR>
"nmap <LEADER>ntt :NERDTreeFind<CR>
"let g:NERDTreeDirArrowExpandable = ' '
"let g:NERDTreeDirArrowExpandable = '>'
"let g:NERDTreeDirArrowCollapsible = '~'
"let nerdtreeshowlinenumbers=1
"let g:NERDTreeWinPos = "right"
"autocmd FileType nerdtree setlocal relativenumber
"

nmap <LEADER>nto :NvimTreeToggle<CR>
nmap <LEADER>ntf :NvimTreeFocus<CR>
nmap <LEADER>ntt :NvimTreeFindFile<CR>

" coc
" function! s:check_back_space() abort
" let col = col('.') - 1
" return !col || getline('.')[col - 1]  =~ '\s'
" endfunction
" 
" inoremap <silent><expr> <TAB>
" 	  \ pumvisible() ? "\<C-n>" :
" 	  \ <SID>check_back_space() ? "\<TAB>" :
" 	  \ coc#refresh()

	
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"
		

"vim
nmap <LEADER>tn :tabnew<CR>
" TOP TWO ARE BROKEN RN IDK WHY
"nnoremap <LEADER>j <C-W><C-J>
"nnoremap <LEADER>k <C-W><C-K>
"nnoremap <LEADER>l <C-W><C-L>
"nnoremap <LEADER>h <C-W><C-H>
nnoremap <leader>b :buffers<CR>
set mouse=a
set tabstop=4
set scrolloff=8
set number relativenumber
set nu rnu
set laststatus=3
set foldmethod=indent

" makes it so that files don't start out folded
set nofoldenable
highlight WinSeperator guibg=None
set showtabline=2
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set autochdir
syntax on
"______________________________________________________________________
"COC
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
